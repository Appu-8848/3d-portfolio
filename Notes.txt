Vite recently it became more popular and more powerful than create react app
 npm create vite@latest ./ -- --template react --> By using this command
this is going to create a new empty react application and before running npm install and npm run Dev

Tailwind CSS an incredibly popular utility first CSS framework that's going to make the styling of our entire application easier
Steps of installation:

Step 1:
Create your project
Start by creating a new Vite project if you don’t have one set up already. The most common approach is to use Create Vite.
npm create vite@latest my-project -- --template react
cd my-project

Step 2:
Install Tailwind CSS
Install tailwindcss and its peer dependencies, then generate your tailwind.config.js and postcss.config.js files.
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

Step 3:
Configure your template paths
Add the paths to all of your template files in your tailwind.config.js file.
/** @type {import('tailwindcss').Config} */
export default {
  content: [  //only copy this content and paste it in tailwind.config.js file
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

Step 4:
Add the Tailwind directives to your CSS
Add the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.
@tailwind base;
@tailwind components;
@tailwind utilities;

Step 5:
Start your build process
Run your build process with npm run dev.
npm run dev

Step 6:
Start using Tailwind in your project
Start using Tailwind’s utility classes to style your content.
export default function App() {
  return (
    <h1 className="text-3xl font-bold underline">
      Hello world!
    </h1>
  )
}

Other packages: 
1. @react-three/fiber : being this is a react based 3js Library that's going to allow us to create 3js code in a react fashion 
2. @react-three/drei : add this to above package
3. maath : math for math utility functions when working with 3js there's going to be a lot of geometry and we definitely need those utility functions 
4. react-tilt : that's going to provide a really cool animation when hovering over our cards 
5. react-vertical-timeline-component : for the experience similar to the one on above 
6. @emailjs/browser : for contact related package
7. framer-motion
8. react-router-dom : for routing 

//clear : clears console
//ctrl + c : terminates current job